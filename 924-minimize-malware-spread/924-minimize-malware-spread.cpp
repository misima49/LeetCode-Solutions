class Solution {
    int findParent(int x, vector<int>& parents) {
        if(parents[x] < 0) return x;
        
        return parents[x] = findParent(parents[x], parents);
    }
        
    void makeUnion(int u, int v, vector<int>& parents) {
        int i = findParent(u, parents);
        int j = findParent(v, parents);

        if(i != j) {
            if(j < i) swap(i, j);

            parents[i] += parents[j];
            parents[j] = i;
        }

    }        
    
    void print(vector<int> par) {
        cout << "\n";
        for(int itr : par) cout << itr << " ";
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> parents(n , -1);
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(graph[i][j] == 1) makeUnion(i, j, parents);
            }
        }
        
        vector<int> initCount(n, 0);
        
        for(int itr : initial) {
            initCount[findParent(itr, parents)]++;
        }
        
        pair<int, int> ans = {1e8, -1};
        for(int itr : initial) {
            int tempPar = findParent(itr, parents);
            if(initCount[tempPar] == 1) {
                // cout << itr << " " << parents[tempPar] << "\n";
                if(parents[tempPar] < ans.first) ans = {parents[tempPar], itr};
                else if(parents[tempPar] == ans.first && itr < ans.second)
                    ans = {parents[tempPar], itr};
            }    
        }
        
        if(ans.second == -1) return *min_element(initial.begin(), initial.end());
        return ans.second;
    }
};